#lang racket 
(define dumb (lambda (n)
               (add1 (* 2 n))
               ))

(define series-acc (lambda(proc acc n)
                 (cond
                 [(equal? acc n) (writeln (number->string (proc acc)))]
                 [else
                 (begin
                 (writeln (number->string (proc acc)))(series-acc proc (add1 acc) n))
                 ]
                 )))

(define series (lambda (proc n)
                  (series-acc proc 1 n)
                  ))