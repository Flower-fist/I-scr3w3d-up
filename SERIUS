#lang racket
#|
the following code is for the UI to run according to user input,
in order to be simple, these are simple mathematical seires.
|#
(define odds (lambda (n)
               (add1 (* 2 n))
               ))
(define even (lambda (n)
               (* 2 n)
               ))
(define bin (lambda (a n)
              (expt a n)
              ))
(define fibo-acc (lambda (acc1 acc2 n)
                   (if
                    (equal? n 0)
                    (+ acc1 acc2)
                    (fibo-acc acc2 (+ acc1 acc2) (sub1 n))
                    )
                   ))
(define fibo (lambda (n)
                (fibo-acc 0 1 n)
                ))

;;these functions are used to print vaules from the above procedures
(define series-acc (lambda(proc acc n)
                 (cond
                 [(equal? acc n) (writeln (number->string (proc acc)))]
                 [else
                 (begin
                 (writeln (number->string (proc acc)))(series-acc proc (add1 acc) n))
                 ]
                 )))
(define series (lambda (proc n)
                  (if
                   (number? n)
                   (series-acc proc 1 n)
                   (series-acc proc 1 (string->number n))
                  )
                  ))
#|
these are used by the current
UI to interpret user commands
|#
(define exec-form/A (lambda (command expect proc)
                    (series proc (substring (symbol->string command) (add1 (string-length expect))))
                  ))
(define exec-form/B-acc (lambda (command expect proc acc)
                      (let ((x
                             (string->number
                              (substring
                               (symbol->string command) (add1 (string-length expect)) (+ 3 (string-length expect))
                               )
                              )
                            )
                            (n
                             (substring
                               (symbol->string command)
                               (+ 3 (string-length expect))
                             ))
                            )
                      (cond
                        [(equal? acc n) (writeln (number->string (proc x acc)))]
                        [else
                          (begin
                          (writeln (number->string (proc x acc)))(exec-form/B-acc command expect proc (add1 acc)))
                        ]
                      )
                      )
                    ))
(define exec-form/B (lambda (command expect proc)
                      (exec-form/B-acc command expect proc 1)
                      ))
(define test-form (lambda (command expect)
                    (if
                    (not (or (number? command)(string? command)))
                    (if
                    (< (string-length (symbol->string command)) (+ 2 (string-length expect)))
                    #f
                    (equal? (substring (symbol->string command) 0 (string-length expect)) expect)
                    )
                    #f
                    )))
#|
the mode variable is how the old UI translates
the input into the code required to be run
and the help varible is text for the user to view,
with the "quit" and "xyzzy"
commands ideally cicrumenting the mode variable
|#
(define mode "none")
(define last "none")
(define help "
This program be can set to different calculation modes using simple commands,                                    
the commands Fibo/Fibonacci/F set the mode to calculate fibonacci numbers,                                       
the commands Odds/Odd numbers/O set the mode to calculate Odd numbers.                                           
once in these modes select a number for the program to use."
)
#|
this is the old version of the UI, archived for comparision to the current code,
[modified so it can be 3mu1at3d by the current UI]
|#
(define interface/0 (lambda ()
                    (writeln ">:sys-old >:")
                    (let ((input (read)))
                      (if (not (equal? input 'quit))
                      (begin
                      (if         (equal? mode "none")
                               (cond
                                 [(equal? input ''Fibonacci)(set! mode "fibo")]
                                 [(equal? input 'Fibo)(set! mode "fibo")]
                                 [(equal? input 'F)(set! mode "fibo")]
                                 [(equal? input 'Odds)(set! mode "odds")]
                                 [(equal? input 'O)(set! mode "odds")]
                                 [(equal? input 'help)(begin (writeln help) (interface/2))]
                                 [else (writeln "command not reconnized.")]
                                 )
                                 (cond
                                   [(equal? mode "fibo")(begin (series fibo input) (set! mode "none"))]
                                   [(equal? mode "odds")(begin (series odds input) (set! mode "none"))]
                                   [else (writeln "deep error(ie, a fluke),please restart program.")]
                                   )
                              )
                      (interface/0)
                      )
                      (begin (writeln "emulator exited.") (interface/2))
                      )
                    )))
#|
if you want add a special command then insert into interface/2,
and if it's really complicated then aux it,
[the term special command means a rigid function of no inputs [for trolling the user]]
[contrasted with normal commands, which have inputs for their calculations]
with normal commands defined by docalc,
using test form to interpret the prefix.
|#

;;displays the (multi-line) help-text to the usr
(define help-fun (lambda ()
                   (begin
                   (writeln "fibo |purpose:      fibonnachi function|type:                                       [math]")
                   (writeln "odds |purpose:        lists odd numbers|type:                                       [math]")
                   (writeln "even |purpose:       lists even numbers|type:                                       [math]")
                   (writeln "retro|purpose: shows last command used| type:                                    [devtool]")
                   (writeln "noss |purpose: emulation of old version|type:                                    [devtool]")
                   (interface/2)
                   )
                   ))
(define troll (lambda (input)
                (writeln
                 (string-append "what sort of moron has '"
                 (substring (symbol->string input) 9)
                                "' as his password?"))
                ))
(define xyzzy (lambda ()
                (begin
                  (writeln "last command used:")
                  (writeln last)
                  (set! last "retrocognition")
                  (interface/2)
              )))
(define cogder (lambda ()
                 (begin
                   (writeln "entering emulator")
                   (set! last "nostalgia")
                   (interface/0)
               )))
(define docalc (lambda (input)
                 (cond
                   [(test-form input "fibo")(begin (exec-form/A input "fibo" fibo)(set! last "math;fibo"))]
                   [(test-form input "odds")(begin (exec-form/A input "odds" odds)(set! last "math;odds"))]
                   [(test-form input "even")(begin (exec-form/A input "even" even)(set! last "math;even"))]
                   [(test-form input "expn") (begin (exec-form/B input "expn" bin) (set! last "math;bins"))]
                   [(test-form input "backdoor")(troll input)]
                   [else (writeln "not a command")]
                 )
                 ))
(define interface/2 (lambda ()
                    (writeln ">:sys-new >:")
                    (let ((input (read)))
                      (cond
                      [(equal? input 'quit)(writeln "program terminated.")]
                      [(equal? input 'xyzzy)(xyzzy)]
                      [(equal? input 'cogder)(cogder)]
                      [(equal? input 'backdoor)(writeln "never gonna give you up, never gonna let you down")]
                      [(equal? input 'help)(help-fun)]
                      [else
                      (begin
                      (docalc input)
                      (interface/2))
                      ]
                      ))))
;;now this runs the code
(writeln "SERIUSCALC program, type 'help' for more information, type 'quit' to exit the program")
(interface/2)